{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar prefix = true ? 'https://cors-anywhere.herokuapp.com/' : ''; // TODO: Remove when CORS will be fixed\n\nexport var fetchDataPost = function fetchDataPost(body, url) {\n  var response;\n  return _regeneratorRuntime.async(function fetchDataPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(prefix).concat(url), {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              Authorization: \"Basic \".concat(process.env.AUTH_TOKEN)\n            },\n            body: body\n          }));\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n};\nexport var fetchDataGet = function fetchDataGet(url) {\n  var response;\n  return _regeneratorRuntime.async(function fetchDataGet$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(prefix).concat(url), {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              Authorization: \"Basic \".concat(process.env.AUTH_TOKEN)\n            }\n          }));\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", _context2.t0);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n};","map":{"version":3,"sources":["C:/xampp/htdocs/myserver/donate.shpp.com-frontend/utils/fetchData.js"],"names":["prefix","fetchDataPost","body","url","fetch","method","headers","Authorization","process","env","AUTH_TOKEN","response","json","fetchDataGet"],"mappings":";AACA,IAAMA,MAAM,GAAG,OAAkB,sCAAlB,GAA2D,EAA1E,C,CAA8E;;AAE9E,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAOC,IAAP,EAAaC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEFC,KAAK,WAAIJ,MAAJ,SAAaG,GAAb,GAAoB;AAC9CE,YAAAA,MAAM,EAAE,MADsC;AAE9CC,YAAAA,OAAO,EAAE;AACP,8BAAgB,mCADT;AAEPC,cAAAA,aAAa,kBAAWC,OAAO,CAACC,GAAR,CAAYC,UAAvB;AAFN,aAFqC;AAM9CR,YAAAA,IAAI,EAAJA;AAN8C,WAApB,CAFH;;AAAA;AAEnBS,UAAAA,QAFmB;AAAA;AAAA,2CAUZA,QAAQ,CAACC,IAAT,EAVY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAgBP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOV,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEDC,KAAK,WAAIJ,MAAJ,SAAaG,GAAb,GAAoB;AAC9CG,YAAAA,OAAO,EAAE;AACP,8BAAgB,mCADT;AAEPC,cAAAA,aAAa,kBAAWC,OAAO,CAACC,GAAR,CAAYC,UAAvB;AAFN;AADqC,WAApB,CAFJ;;AAAA;AAElBC,UAAAA,QAFkB;AAAA;AAAA,2CAQXA,QAAQ,CAACC,IAAT,EARW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["\nconst prefix = process.browser ? 'https://cors-anywhere.herokuapp.com/' : ''; // TODO: Remove when CORS will be fixed\n\nexport const fetchDataPost = async (body, url) => {\n  try {\n    const response = await fetch(`${prefix}${url}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${process.env.AUTH_TOKEN}`,\n      },\n      body,\n    });\n    return await response.json();\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchDataGet = async (url) => {\n  try {\n    const response = await fetch(`${prefix}${url}`, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${process.env.AUTH_TOKEN}`,\n      },\n    });\n    return await response.json();\n  } catch (error) {\n    return error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}